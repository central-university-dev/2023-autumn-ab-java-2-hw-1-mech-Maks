Класс `HashMap` является реализацией интерфейса `Map`.

В `HashMap` [в отличие от `Hashtable`] можно класть `null` в ключ и значение.

Нет гарантий на порядок элементов.

Для операций `get` и `put` работает в среднем за O(1).

Пусть мы решили положить ключ-значение в `HashMap`. Как это будет происходить:
1. Ключ превращается в 32-битное значение с помощью `hashCode()`
2. Это 32-битное значение с помощью специальной функции HashMap'а превратится в какое-то другое число,
   которое будет говорить о том, в какой бакет положить значение. Специальную функцию нельзя переопределить.
3. Каждый бакет содержит в себе `null` или связный список. Положим в нужный бакет значение.

Чтобы пробежаться по всему инстансу `HashMap` потребуется O(размер хэшмапы).

Когда мы создаем объект `HashMap` мы можем указать 2 параметра: `int initialCapacity`, `float loadFactor`.
`initialCapacity` - количество бакетов в хэшмапе в момент ее создания,
а `loadFactor` - мера того, насколько заполненной должна стать хэшмапа, чтобы произошло увеличение ее размера [rehash].

Стоит помнить, что HashMap не синхронизируется, т.е если несколько потоков работают с ней,
и какой-то поток решаетее изменить, то ему нужно взять блокировку на нее.

Итератор HashMap'ы является "fail-fast".
"Fail-fast" означает, что при попытке модификации содержимого в процессе итерации произойдет сбой и будет выброшен
`ConcurrentModificationException`.
У HashMap'ы есть много замечательных методов, таких как:
`put`, `get`, `clean`, `clone`, `containsKey`, `containsValue`, `getOrDefault`, `isEmpty`, `remove` и многих других.
